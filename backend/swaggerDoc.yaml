openapi: 3.0.3
info:
  title: Disaster Management API
  version: 1.0.0
servers:
  - url: http://localhost:5555/api
    description: development server
  - url: https://cdrp-1.onrender.com/api
    description: production server
tags:
  - name: Users
  - name: Organizations
  - name: Reports
  - name: Volunteers
  - name: News
  - name: Incidents
  - name: Assignments
  - name: CharityAds
  - name: Announcements
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      required: [firstName, lastName, email, phone, password]
      properties:
        _id: { type: string }
        firstName: { type: string, minLength: 4 }
        lastName: { type: string, minLength: 3 }
        email: { type: string, format: email }
        phone: { type: string }
        password: { type: string }
        role: { type: string, enum: [user, admin], default: user }
        image: { type: string, format: uri }
        cloudinaryId: { type: string }
        isVerified: { type: boolean, default: false }
        verificationToken: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Organization:
      type: object
      required: [organizationName, email, phone, password, taxId, role]
      properties:
        _id: { type: string }
        organizationName: { type: string, minLength: 5 }
        email: { type: string, format: email }
        phone: { type: string }
        password: { type: string }
        taxId: { type: string }
        image: { type: string, format: uri }
        cloudinaryId: { type: string }
        mission: { type: string, minLength: 5, maxLength: 100 }
        role: { type: string, enum: [charity, government], default: charity }
        isVerified: { type: boolean, default: false }
        status: { type: string, enum: [active, inactive], default: active }
        verificationToken: { type: string }
        emailVerified: { type: boolean, default: false }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Report:
      type: object
      required: [type, description, location]
      properties:
        _id: { type: string }
        type: { type: string, minLength: 4 }
        title: { type: string, minLength: 4 }
        description: { type: string, minLength: 4, maxLength: 300 }
        image:
          {
            type: array,
            items:
              {
                type: object,
                properties:
                  {
                    url: { type: string, format: uri },
                    cloudinaryId: { type: string },
                  },
              },
          }
        location:
          {
            type: object,
            properties:
              {
                type: { type: string, enum: [Point] },
                coordinates: { type: array, items: { type: number } },
                name: { type: string },
              },
          }
        reportedBy: { type: string }
        incident: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Incident:
      type: object
      required: [type, title, description, dateOccurred, location]
      properties:
        _id: { type: string }
        type:
          type: string
          minLength: 4
          description: "Type of incident (must be at least 4 characters)"
        title:
          type: string
          minLength: 4
          description: "Title of the incident (must be at least 4 characters)"
        description:
          type: string
          minLength: 4
          maxLength: 300
          description: "Description of the incident (4-300 characters)"
        dateOccurred:
          type: string
          format: date-time
          description: "Date when the incident occurred"
        location:
          type: object
          required: [type, coordinates]
          properties:
            type:
              type: string
              enum: [Point]
            coordinates:
              type: array
              items:
                type: number
              description: "[longitude, latitude]"
            name:
              type: string
              description: "Location name (auto-populated by geocoding)"
        status:
          type: string
          enum:
            [pending, validated, assigned, "in progress", critical, resolved]
          default: pending
        reports:
          type: array
          items:
            type: string
            description: "Array of Report IDs"
        priority:
          type: string
          enum: [high, medium, low]
          default: medium
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    News:
      type: object
      required: [title, description, incident]
      properties:
        _id: { type: string }
        title: { type: string, minLength: 4 }
        description: { type: string, minLength: 4, maxLength: 1000 }
        images:
          {
            type: array,
            items:
              {
                type: object,
                properties:
                  {
                    url: { type: string, format: uri },
                    cloudinaryId: { type: string },
                  },
              },
          }
        incident: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    CharityAd:
      type: object
      required: [charity, title, description, duration]
      properties:
        _id: { type: string }
        charity:
          type: string
          description: "Organization ID (must be a charity organization)"
        title:
          type: string
          minLength: 4
          maxLength: 50
          description: "Title of the charity ad (4-50 characters)"
        image:
          type: string
          format: uri
          description: "URL of the charity ad image"
        cloudinaryId:
          type: string
          description: "Cloudinary ID for the image"
        description:
          type: string
          minLength: 4
          maxLength: 1000
          description: "Description of the charity ad (4-1000 characters)"
        status:
          type: string
          enum: [open, closed]
          default: open
        volunteers:
          type: array
          items:
            type: string
            description: "Array of Volunteer IDs"
        duration:
          type: number
          description: "Duration in milliseconds (default: 7 days)"
        expiresAt:
          type: string
          format: date-time
          description: "Expiration date (auto-calculated based on duration)"
        categories:
          type: array
          items:
            type: string
          description: "Array of category strings"
        requirements:
          type: object
          properties:
            location:
              type: string
              description: "Required location for volunteers"
            skills:
              type: array
              items:
                type: string
              description: "Array of required skills"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Announcement:
      type: object
      required: [incident, title, description]
      properties:
        _id: { type: string }
        incident: { type: string }
        title: { type: string, minLength: 4 }
        description: { type: string, minLength: 4, maxLength: 300 }
        charities:
          {
            type: array,
            items:
              {
                type: object,
                properties:
                  {
                    charity: { type: string },
                    response:
                      {
                        type: string,
                        enum: [Pending, Accepted, Rejected],
                        default: Pending,
                      },
                  },
              },
          }
        duration: { type: number }
        expiresAt: { type: string, format: date-time }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Assignment:
      type: object
      required: [incident, organization, assignedBy]
      properties:
        _id: { type: string }
        incident: { type: string }
        organization: { type: string }
        assignedBy: { type: string }
        notes: { type: string, maxLength: 500 }
        priorityLevel:
          { type: string, enum: [high, medium, low], default: medium }
        status:
          {
            type: string,
            enum: [active, completed, cancelled],
            default: active,
          }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Volunteer:
      type: object
      required:
        [
          charityAdId,
          user,
          fullName,
          age,
          email,
          phone,
          expertise,
          contribution,
        ]
      properties:
        _id: { type: string }
        charityAdId:
          type: string
          description: "CharityAd ID reference"
        user:
          type: string
          description: "User ID reference"
        fullName:
          type: string
          minLength: 5
          description: "Full name (must be at least 5 characters)"
        sex:
          type: string
          enum: [male, female]
          description: "Gender of the volunteer"
        age:
          type: integer
          minimum: 1
          maximum: 120
          description: "Age of the volunteer (1-120)"
        email:
          type: string
          format: email
          description: "Valid email address"
        phone:
          type: string
          pattern: "^\\+?[1-9]\\d{1,14}$"
          description: "Phone number in E.164 format"
        expertise:
          type: string
          description: "Volunteer's expertise"
        contribution:
          type: string
          description: "Type of contribution"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
paths:
  /user:
    get:
      tags: [Users]
      security:
        - bearerAuth: []
      summary: Get all users
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      tags: [Users]
      summary: Create a new user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [firstName, lastName, email, phone, password]
              properties:
                firstName: { type: string }
                lastName: { type: string }
                email: { type: string, format: email }
                phone: { type: string }
                password: { type: string }
                image: { type: string, format: binary }
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    delete:
      tags: [Users]
      security:
        - bearerAuth: []
      summary: Delete all users (admin only)
      responses:
        "200":
          description: All users deleted successfully
  /user/login:
    post:
      tags: [Users]
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [identifier, password]
              properties:
                identifier: { type: string }
                password: { type: string }
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  user: { $ref: "#/components/schemas/User" }
  /user/verify:
    get:
      tags: [Users]
      summary: Verify user email
      parameters:
        - in: query
          name: token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User verified successfully
  /user/{id}:
    get:
      tags: [Users]
      security:
        - bearerAuth: []
      summary: Get user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    patch:
      tags: [Users]
      security:
        - bearerAuth: []
      summary: Update user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                firstName: { type: string }
                lastName: { type: string }
                email: { type: string, format: email }
                phone: { type: string }
                image: { type: string, format: binary }
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    delete:
      tags: [Users]
      security:
        - bearerAuth: []
      summary: Delete user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User deleted successfully
  /user/changePassword/{id}:
    patch:
      tags: [Users]
      security:
        - bearerAuth: []
      summary: Change user password
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [oldPassword, newPassword]
              properties:
                oldPassword: { type: string }
                newPassword: { type: string }
      responses:
        "200":
          description: Password changed successfully
  /user/forceResetPassword/{id}:
    patch:
      tags: [Users]
      security:
        - bearerAuth: []
      summary: Force reset user password (admin only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [newPassword]
              properties:
                newPassword: { type: string }
      responses:
        "200":
          description: Password reset successfully
  /org:
    get:
      tags: [Organizations]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 5 }
        - in: query
          name: search
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        type: array,
                        items: { $ref: "#/components/schemas/Organization" },
                      },
                  },
              },
          }
    post:
      tags: [Organizations]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                organizationName: { type: string }
                email: { type: string }
                phone: { type: string }
                password: { type: string }
                taxId: { type: string }
                mission: { type: string }
                role: { type: string }
                image: { type: string, format: binary }
      responses:
        "201":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Organization" } },
              },
          }
    delete:
      tags: [Organizations]
      security: [{ bearerAuth: [] }]
      responses:
        "200": { content: { application/json: {} } }
  /org/login:
    post:
      tags: [Organizations]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [identifier, password]
              properties:
                identifier: { type: string }
                password: { type: string }
      responses:
        "200": { content: { application/json: {} } }
  /org/verifyEmail:
    get:
      tags: [Organizations]
      parameters:
        - in: query
          name: token
          schema: { type: string }
      responses:
        "200": { content: { application/json: {} } }
  /org/{id}:
    get:
      tags: [Organizations]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Organization" } },
              },
          }
    patch:
      tags: [Organizations]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                organizationName: { type: string }
                email: { type: string }
                phone: { type: string }
                mission: { type: string }
                role: { type: string }
                image: { type: string, format: binary }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Organization" } },
              },
          }
    delete:
      tags: [Organizations]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200": { content: { application/json: {} } }
  /org/verify/{id}:
    patch:
      tags: [Organizations]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200": { content: { application/json: {} } }
  /report:
    get:
      tags: [Reports]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 5 }
        - in: query
          name: search
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        type: array,
                        items: { $ref: "#/components/schemas/Report" },
                      },
                  },
              },
          }
    post:
      tags: [Reports]
      security: [{ bearerAuth: [] }]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required: [type, description, latitude, longitude]
              properties:
                type: { type: string }
                title: { type: string }
                description: { type: string }
                latitude: { type: number, format: float }
                longitude: { type: number, format: float }
                reportedBy:
                  { type: string, description: "User ID of the reporter" }
                image:
                  {
                    type: array,
                    items: { type: string, format: binary },
                    maxItems: 10,
                  }
      responses:
        "201":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Report" } },
              },
          }
    delete:
      tags: [Reports]
      security: [{ bearerAuth: [] }]
      responses:
        "200": { content: { application/json: {} } }
  /report/{id}:
    get:
      tags: [Reports]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Report" } },
              },
          }
    put:
      tags: [Reports]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                type: { type: string }
                title: { type: string }
                description: { type: string }
                location:
                  {
                    type: object,
                    properties:
                      {
                        type: { type: string },
                        coordinates: { type: array, items: { type: number } },
                      },
                  }
                image:
                  {
                    type: array,
                    items: { type: string, format: binary },
                    maxItems: 10,
                  }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Report" } },
              },
          }
    delete:
      tags: [Reports]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200": { content: { application/json: {} } }
  /report/user/{id}:
    get:
      tags: [Reports]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        type: array,
                        items: { $ref: "#/components/schemas/Report" },
                      },
                  },
              },
          }
  /volunteer:
    get:
      tags: [Volunteers]
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          {
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        type: array,
                        items: { $ref: "#/components/schemas/Volunteer" },
                      },
                  },
              },
          }
    post:
      tags: [Volunteers]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                [
                  charityAdId,
                  user,
                  fullName,
                  age,
                  email,
                  phone,
                  expertise,
                  contribution,
                ]
              properties:
                charityAdId:
                  type: string
                  description: "CharityAd ID reference"
                user:
                  type: string
                  description: "User ID reference"
                fullName:
                  type: string
                  minLength: 5
                  description: "Full name (must be at least 5 characters, alphanumeric with basic punctuation)"
                sex:
                  type: string
                  enum: [male, female]
                  description: "Gender of the volunteer"
                age:
                  type: integer
                  minimum: 18
                  maximum: 80
                  description: "Age of the volunteer (must be between 18 and 80)"
                email:
                  type: string
                  format: email
                  description: "Valid email address (must be unique)"
                phone:
                  type: string
                  pattern: "^\\+?[1-9]\\d{1,14}$"
                  description: "Phone number in E.164 format (must be unique)"
                expertise:
                  type: string
                  description: "Volunteer's expertise"
                contribution:
                  type: string
                  description: "Type of contribution"
      responses:
        "201":
          description: Volunteer registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Volunteer"
    delete:
      tags: [Volunteers]
      security: [{ bearerAuth: [] }]
      responses:
        "200": { content: { application/json: {} } }
  /volunteer/{id}:
    get:
      tags: [Volunteers]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Volunteer" } },
              },
          }
    put:
      tags: [Volunteers]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName: { type: string }
                sex: { type: string }
                age: { type: number }
                email: { type: string }
                phone: { type: string }
                expertise: { type: string }
                contribution: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Volunteer" } },
              },
          }
    delete:
      tags: [Volunteers]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200": { content: { application/json: {} } }
  /news:
    get:
      tags: [News]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
        - in: query
          name: search
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        type: array,
                        items: { $ref: "#/components/schemas/News" },
                      },
                  },
              },
          }
    post:
      tags: [News]
      security: [{ bearerAuth: [] }]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                description: { type: string }
                incident: { type: string }
                images:
                  {
                    type: array,
                    items:
                      {
                        type: object,
                        properties:
                          {
                            url: { type: string, format: uri },
                            cloudinaryId: { type: string },
                          },
                      },
                  }
      responses:
        "201":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/News" } },
              },
          }
    delete:
      tags: [News]
      security: [{ bearerAuth: [] }]
      responses:
        "200": { content: { application/json: {} } }
  /news/{id}:
    get:
      tags: [News]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/News" } },
              },
          }
    put:
      tags: [News]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                description: { type: string }
                incident: { type: string }
                images:
                  {
                    type: array,
                    items:
                      {
                        type: object,
                        properties:
                          {
                            url: { type: string, format: uri },
                            cloudinaryId: { type: string },
                          },
                      },
                  }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/News" } },
              },
          }
    patch:
      tags: [News]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                description: { type: string }
                incident: { type: string }
                images:
                  {
                    type: array,
                    items:
                      {
                        type: object,
                        properties:
                          {
                            url: { type: string, format: uri },
                            cloudinaryId: { type: string },
                          },
                      },
                  }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/News" } },
              },
          }
    delete:
      tags: [News]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200": { content: { application/json: {} } }
  /incidents:
    get:
      tags: [Incidents]
      security:
        - bearerAuth: []
      summary: Get all incidents (admin and government only)
      responses:
        "200":
          description: List of incidents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Incident"
    delete:
      tags: [Incidents]
      security:
        - bearerAuth: []
      summary: Delete all incidents (admin and government only)
      responses:
        "200":
          description: All incidents deleted successfully
  /incidents/{id}:
    get:
      tags: [Incidents]
      security:
        - bearerAuth: []
      summary: Get incident by ID (admin and government only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Incident details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Incident"
    delete:
      tags: [Incidents]
      security:
        - bearerAuth: []
      summary: Delete incident (admin and government only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Incident deleted successfully
  /incidents/images/{id}:
    get:
      tags: [Incidents]
      security:
        - bearerAuth: []
      summary: Get incident images (admin and government only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of incident images
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    url: { type: string, format: uri }
                    cloudinaryId: { type: string }
  /incidents/{id}/assign:
    post:
      tags: [Incidents]
      security:
        - bearerAuth: []
      summary: Assign incident to a charity (government only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [organization, assignedBy]
              properties:
                organization: { type: string }
                assignedBy: { type: string }
                notes: { type: string }
                priorityLevel: { type: string, enum: [high, medium, low] }
      responses:
        "201":
          description: Assignment created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Assignment"
  /incidents/{id}/assignments:
    get:
      tags: [Incidents]
      security:
        - bearerAuth: []
      summary: Get assignments for a specific incident (admin and government only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of assignments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Assignment"
  /assignments:
    get:
      tags: [Assignments]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
        - in: query
          name: organization
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        type: array,
                        items: { $ref: "#/components/schemas/Assignment" },
                      },
                  },
              },
          }
    post:
      tags: [Assignments]
      security: [{ bearerAuth: [] }]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                incidentId: { type: string }
                organizationId: { type: string }
                notes: { type: string }
                priorityLevel: { type: string }
      responses:
        "201":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Assignment" } },
              },
          }
  /assignments/{id}:
    get:
      tags: [Assignments]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Assignment" } },
              },
          }
    patch:
      tags: [Assignments]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Assignment" } },
              },
          }
  /assignments/incident/{incidentId}:
    get:
      tags: [Assignments]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: incidentId
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        type: array,
                        items: { $ref: "#/components/schemas/Assignment" },
                      },
                  },
              },
          }
  /charityad:
    get:
      tags: [CharityAds]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 5 }
        - in: query
          name: search
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        type: array,
                        items: { $ref: "#/components/schemas/CharityAd" },
                      },
                  },
              },
          }
    post:
      tags: [CharityAds]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [charity, title, description]
              properties:
                charity:
                  type: string
                  description: "Organization ID (must be a charity organization)"
                title:
                  type: string
                  minLength: 4
                  maxLength: 50
                  description: "Title of the charity ad (4-50 characters, alphanumeric with basic punctuation)"
                description:
                  type: string
                  minLength: 4
                  maxLength: 1000
                  description: "Description of the charity ad (4-1000 characters, alphanumeric with basic punctuation)"
                image:
                  type: string
                  format: binary
                  description: "Image file for the charity ad"
                duration:
                  type: number
                  description: "Duration in milliseconds (default: 7 days = 604800000 ms)"
                categories:
                  type: array
                  items:
                    type: string
                  description: "Array of category strings"
                requirements:
                  type: object
                  properties:
                    location:
                      type: string
                      description: "Required location for volunteers"
                    skills:
                      type: array
                      items:
                        type: string
                      description: "Array of required skills"
      responses:
        "201":
          description: Charity ad created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CharityAd"
    delete:
      tags: [CharityAds]
      security: [{ bearerAuth: [] }]
      responses:
        "200": { content: { application/json: {} } }
  /charityad/{id}:
    get:
      tags: [CharityAds]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/CharityAd" } },
              },
          }
    put:
      tags: [CharityAds]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                charity: { type: string }
                title: { type: string }
                description: { type: string }
                duration: { type: number }
                categories: { type: array, items: { type: string } }
                requirements:
                  {
                    type: object,
                    properties:
                      {
                        location: { type: string },
                        skills: { type: array, items: { type: string } },
                      },
                  }
                image: { type: string, format: binary }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/CharityAd" } },
              },
          }
    delete:
      tags: [CharityAds]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200": { content: { application/json: {} } }
  /announcement:
    get:
      tags: [Announcements]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
        - in: query
          name: search
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        type: array,
                        items: { $ref: "#/components/schemas/Announcement" },
                      },
                  },
              },
          }
    post:
      tags: [Announcements]
      security: [{ bearerAuth: [] }]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                incident: { type: string }
                title: { type: string }
                description: { type: string }
                charities: { type: array, items: { type: string } }
      responses:
        "201":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Announcement" } },
              },
          }
  /announcement/{id}:
    get:
      tags: [Announcements]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Announcement" } },
              },
          }
    put:
      tags: [Announcements]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                description: { type: string }
                charities: { type: array, items: { type: string } }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Announcement" } },
              },
          }
    delete:
      tags: [Announcements]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200": { content: { application/json: {} } }
