openapi: 3.0.3
info:
  title: cdrp(croudsourced disaster response platform) API
  description: API for managing charity ads, announcements, incidents, news, volunteers, organizations, reports, and users.
  version: 1.0.0
servers:
  - url: /api
    description: cdrp backend
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Announcement:
      type: object
      required:
        - title
        - description
      properties:
        title:
          type: string
          minLength: 4
          pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
        description:
          type: string
          minLength: 4
          maxLength: 300
          pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
        charities:
          type: array
          items:
            type: object
            required:
              - charity
            properties:
              charity:
                type: string
                format: objectId
              response:
                type: string
                enum: [Pending, Accepted, Rejected]
                default: Pending
        duration:
          type: integer
          description: Duration in milliseconds, defaults to 7 days.
        expiresAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Incident:
      type: object
      required:
        - type
        - title
        - description
        - dateOccurred
        - location
      properties:
        type:
          type: string
          minLength: 4
          pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
        title:
          type: string
          minLength: 4
          pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
        description:
          type: string
          minLength: 4
          maxLength: 300
          pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
        dateOccurred:
          type: string
          format: date-time
        location:
          type: object
          required:
            - type
            - coordinates
          properties:
            type:
              type: string
              enum: [Point]
            coordinates:
              type: array
              items:
                type: number
              minItems: 2
              maxItems: 2
        status:
          type: string
          enum: [pending, validated]
          default: pending
        reports:
          type: array
          items:
            type: string
            format: objectId
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    User:
      type: object
      required:
        - firstName
        - lastName
        - email
        - phone
        - password
        - role
      properties:
        firstName:
          type: string
          minLength: 4
          pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
        lastName:
          type: string
          minLength: 4
          pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
        email:
          type: string
          format: email
        phone:
          type: string
        password:
          type: string
        role:
          type: string
          enum: [user, admin]
          default: user
        image:
          type: string
          default: default-profile.png
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CharityAd:
      type: object
      required:
        - charity
        - title
        - description
      properties:
        charity:
          type: string
          format: objectId
        title:
          type: string
          minLength: 4
          maxLength: 50
          pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
        image:
          type: string
          default: ""
        description:
          type: string
          minLength: 4
          maxLength: 1000
          pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
        status:
          type: string
          enum: [open, closed] # Model uses open/closed
          default: open
        volunteers:
          type: array
          items:
            type: string
            format: objectId
        duration:
          type: integer
          description: Duration in milliseconds as stored in the model. Input for creation/update is typically in days.
        expiresAt:
          type: string
          format: date-time
        categories:
          type: array
          items:
            type: string
          nullable: true
        requirements:
          type: array
          items:
            type: object
            properties:
              location:
                type: string
              skills:
                type: array
                items:
                  type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    News:
      type: object
      required:
        - title
        - description
        - incident
        - images
      properties:
        title:
          type: string
          minLength: 4
          pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
        description:
          type: string
          minLength: 4
          maxLength: 1000
          pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
        images:
          type: array
          minItems: 1
          items:
            type: object
            required:
              - url
              - cloudinaryId
            properties:
              url:
                type: string
                format: uri
              cloudinaryId:
                type: string
        incident:
          type: string
          format: objectId
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Organization:
      type: object
      required:
        - organizationName
        - email
        - phone
        - password
        - role
      properties:
        organizationName: # Changed from name
          type: string
          minLength: 5
          pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
        email:
          type: string
          format: email
        phone:
          type: string
        password:
          type: string
        taxId:
          type: string
        image:
          type: string
        mission:
          type: string
          minLength: 5
          maxLength: 100
          pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
        role:
          type: string
          enum: [charity, government]
          default: charity
        isVerified:
          type: boolean
          default: false
        status:
          type: string
          enum: [active, inactive] # Changed from pending, active
          default: active # Changed from pending
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Volunteer:
      type: object
      required:
        - user
        - fullName
        - age
        - email
        - phone
        - expertise
        - contribution
        - charityAdId # Added based on controller
      properties:
        charityAdId: # Added based on controller
          type: string
          format: objectId
        user:
          type: string
          format: objectId
        fullName:
          type: string
          minLength: 5
          pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
        sex:
          type: string
          enum: [male, female]
        age:
          type: integer
          minimum: 1
          maximum: 120
        email:
          type: string
          format: email
        phone:
          type: string
          pattern: ^\+?[1-9]\d{1,14}$
        expertise:
          type: string
        contribution:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Report:
      type: object
      required:
        - type
        - description
      properties:
        type:
          type: string
          minLength: 4
          pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
        title:
          type: string
          minLength: 10
          pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
        description:
          type: string
          minLength: 4
          maxLength: 300
          pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
        image:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
                format: uri
              cloudinaryId:
                type: string
        location:
          type: object
          required:
            - type
            - coordinates
          properties:
            type:
              type: string
              enum: [Point]
            coordinates:
              type: array
              items:
                type: number
              minItems: 2
              maxItems: 2
            name: # Added from model
              type: string
        reportedBy:
          type: string
          format: objectId
        incident:
          type: string
          format: objectId
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Error:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        error:
          type: string
    PaginatedResponse: # Base for pagination fields
      type: object
      properties:
        success:
          type: boolean
        page:
          type: integer
    PaginatedAnnouncementResponse:
      allOf:
        - $ref: "#/components/schemas/PaginatedResponse"
        - type: object
          properties:
            totalCount:
              type: integer
            searchCount:
              type: integer
            data:
              type: array
              items:
                $ref: "#/components/schemas/Announcement"
    PaginatedIncidentResponse:
      allOf:
        - $ref: "#/components/schemas/PaginatedResponse"
        - type: object
          properties:
            totalCount:
              type: integer
            searchCount:
              type: integer
            data:
              type: array
              items:
                $ref: "#/components/schemas/Incident"
    PaginatedUserResponse:
      allOf:
        - $ref: "#/components/schemas/PaginatedResponse"
        - type: object
          properties:
            totalCount:
              type: integer
            searchCount:
              type: integer
            message: # User controller includes a message here
              type: string
            data:
              type: array
              items:
                $ref: "#/components/schemas/User"
    PaginatedCharityAdResponse:
      allOf:
        - $ref: "#/components/schemas/PaginatedResponse"
        - type: object
          properties:
            totalCount:
              type: integer
            searchCount:
              type: integer
            data:
              type: array
              items:
                $ref: "#/components/schemas/CharityAd"
    PaginatedNewsResponse:
      allOf:
        - $ref: "#/components/schemas/PaginatedResponse"
        - type: object
          properties:
            totalCount:
              type: integer
            searchCount:
              type: integer
            data:
              type: array
              items:
                $ref: "#/components/schemas/News"
    PaginatedOrganizationResponse:
      allOf:
        - $ref: "#/components/schemas/PaginatedResponse"
        - type: object
          properties:
            totalCount:
              type: integer
            searchCount:
              type: integer
            data:
              type: array
              items:
                $ref: "#/components/schemas/Organization"
    PaginatedVolunteerResponse:
      allOf:
        - $ref: "#/components/schemas/PaginatedResponse"
        - type: object
          properties:
            totalCount:
              type: integer
            searchCount:
              type: integer
            data:
              type: array
              items:
                $ref: "#/components/schemas/Volunteer"
    PaginatedReportResponse:
      allOf:
        - $ref: "#/components/schemas/PaginatedResponse"
        - type: object
          properties:
            totalCount: # Controller currently doesn't return searchCount for reports
              type: integer
            searchCount:
              type: integer
              description: "Note: Controller currently does not provide searchCount for reports."
            data:
              type: array
              items:
                $ref: "#/components/schemas/Report"
paths:
  /announcement:
    get:
      summary: Get all announcements
      tags:
        - Announcements
      security:
        - bearerAuth: []
      parameters:
        - name: search
          in: query
          description: Search term (matches title)
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
      responses:
        "200":
          description: List of announcements
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedAnnouncementResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires admin or verified charity role.
    post:
      summary: Create a new announcement
      tags:
        - Announcements
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 4
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                description:
                  type: string
                  minLength: 4
                  maxLength: 300
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                charities: # Controller expects array of ObjectIds for 'charities' field in Announcement model
                  type: array
                  items:
                    type: string
                    format: objectId
              required:
                - title
                - description
                # charities implicitly required by controller logic for non-empty array
      responses:
        "201":
          description: Announcement created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/Announcement"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires government role.
  /announcement/{id}:
    get:
      summary: Get an announcement by ID
      tags:
        - Announcements
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      responses:
        "200":
          description: Announcement details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/Announcement"
        "400":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Announcement not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires authentication.
    put:
      summary: Update an announcement
      tags:
        - Announcements
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 4
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                description:
                  type: string
                  minLength: 4
                  maxLength: 300
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                charities:
                  type: array
                  items:
                    type: string
                    format: objectId
      responses:
        "200":
          description: Announcement updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/Announcement"
        "400":
          description: Invalid ID or bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Announcement not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires government role.
    delete:
      summary: Delete an announcement
      tags:
        - Announcements
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      responses:
        "200":
          description: Announcement deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data: # Controller returns deleted announcement
                    $ref: "#/components/schemas/Announcement"
        "400":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Announcement not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires government or admin role.
  /charityad:
    get:
      summary: Get all charity ads
      tags:
        - CharityAds
      security:
        - bearerAuth: []
      parameters:
        - name: search
          in: query
          description: Search term (matches title, description, status, or categories)
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 5 # Controller uses 5
            minimum: 1
      responses:
        "200":
          description: List of charity ads
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedCharityAdResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires authentication.
    post:
      summary: Create a new charity ad
      tags:
        - CharityAds
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                charity:
                  type: string
                  format: objectId
                title:
                  type: string
                  minLength: 4
                  maxLength: 50
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                duration:
                  type: integer
                  minimum: 1
                  maximum: 30 # As per controller logic for days
                  description: Duration in days
                description:
                  type: string
                  minLength: 4
                  maxLength: 1000
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                image:
                  type: string
                  format: binary
                status:
                  type: string
                  enum: [open, closed]
                  default: open
                categories: # Added
                  type: string # Sent as stringified JSON array
                  description: JSON string of an array of category strings. E.g., '["Medical Aid", "Food Drive"]'
                requirements: # Added
                  type: string # Sent as stringified JSON array
                  description: JSON string of an array of requirement objects. E.g., '[{"location": "North", "skills": ["Driving"]}]'
              required:
                - charity
                - title
                - description
                - duration # Model requires duration
      responses:
        "201":
          description: Charity ad created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data: # Controller uses 'data' key
                    $ref: "#/components/schemas/CharityAd"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires verified charity role.
    delete:
      summary: Delete all charity ads
      tags:
        - CharityAds
      security:
        - bearerAuth: []
      responses:
        "200":
          description: All charity ads deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  count:
                    type: integer
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires admin role.
  /charityad/{id}:
    get:
      summary: Get a charity ad by ID
      tags:
        - CharityAds
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      responses:
        "200":
          description: Charity ad details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message: # Controller adds message
                    type: string
                  data:
                    $ref: "#/components/schemas/CharityAd"
        "400": # Controller specific error for invalid ID
          description: Invalid charity ad ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Charity ad not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires authentication.
    put:
      summary: Update a charity ad
      tags:
        - CharityAds
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                charity:
                  type: string
                  format: objectId
                # incident: # Not in model or controller update logic
                #   type: string
                #   format: objectId
                #   nullable: true
                title:
                  type: string
                  minLength: 4
                  maxLength: 50
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                duration:
                  type: integer
                  description: Duration in days
                description:
                  type: string
                  minLength: 4
                  maxLength: 1000
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                image:
                  type: string
                  format: binary
                status:
                  type: string
                  enum: [open, closed]
                categories: # Added
                  type: string
                  description: JSON string of an array of category strings.
                requirements: # Added
                  type: string
                  description: JSON string of an array of requirement objects.
              # No 'required' fields for PUT as it's a partial update by controller
      responses:
        "200":
          description: Charity ad updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/CharityAd"
        "400":
          description: Bad request or invalid ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Charity ad not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires verified charity role.
    delete:
      summary: Delete a charity ad
      tags:
        - CharityAds
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      responses:
        "200":
          description: Charity ad deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data: # Controller returns deleted ad
                    $ref: "#/components/schemas/CharityAd"
        "400": # Controller specific error for invalid ID
          description: Invalid charity ad ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Charity ad not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires verified charity role.
  /incidents:
    get:
      summary: Get all incidents
      tags:
        - Incidents
      security:
        - bearerAuth: []
      parameters:
        - name: search
          in: query
          description: Search term (matches title, status, type, or date)
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 5
            minimum: 1
      responses:
        "200":
          description: List of incidents
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedIncidentResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires admin or government role.
    delete:
      summary: Delete all incidents
      tags:
        - Incidents
      security:
        - bearerAuth: []
      responses:
        "200":
          description: All incidents deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  count: # Controller returns countCount
                    type: integer
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires admin or government role.
  /incidents/{id}:
    get:
      summary: Get an incident by ID
      tags:
        - Incidents
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      responses:
        "200":
          description: Incident details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: "#/components/schemas/Incident"
        "400":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Incident not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires admin or government role.
    delete:
      summary: Delete an incident
      tags:
        - Incidents
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      responses:
        "200":
          description: Incident deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "400":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Incident not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires admin or government role.
  /incidents/images/{id}:
    get:
      summary: Get all images from reports of an incident
      tags:
        - Incidents
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      responses:
        "200":
          description: List of images from reports
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        url:
                          type: string
                          format: uri
                        cloudinaryId:
                          type: string
        "400":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Incident not found (or no images, controller doesn't differentiate)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires admin or government role.
  /news:
    get:
      summary: Get all news
      tags:
        - News
      security:
        - bearerAuth: []
      parameters:
        - name: search
          in: query
          description: Search term (matches title)
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
      responses:
        "200":
          description: List of news
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedNewsResponse" # This already expects success, totalCount, searchCount, data, page
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires authentication.
    post:
      summary: Create a new news item
      tags:
        - News
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data: # Controller uses upload.none() but parses 'images' as stringified JSON from form data
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 4
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                description:
                  type: string
                  minLength: 4
                  maxLength: 1000
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                images: # Sent as a stringified JSON array of objects
                  type: string
                  description: "A JSON string representing an array of image objects, e.g., '[{\"url\":\"http://...\", \"cloudinaryId\":\"...\"}]'"
                incident:
                  type: string
                  format: objectId
              required:
                - title
                - description
                - incident
                - images
      responses:
        "201":
          description: News item created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/News"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires government role.
    delete:
      summary: Delete all news
      tags:
        - News
      security:
        - bearerAuth: []
      responses:
        "200":
          description: All news deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message: # Controller uses 'messages'
                    type: string
                  count:
                    type: integer
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires admin or government role.
  /news/{id}:
    get:
      summary: Get a news item by ID
      tags:
        - News
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      responses:
        "200":
          description: News item details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/News"
        "400":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: News item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires authentication.
    put:
      summary: Update a news item
      tags:
        - News
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      requestBody:
        required: true
        content:
          multipart/form-data: # Controller uses upload.none() but parses 'images' as stringified JSON
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 4
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                description:
                  type: string
                  minLength: 4
                  maxLength: 1000
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                images: # Sent as a stringified JSON array of objects
                  type: string
                  description: "A JSON string representing an array of image objects, e.g., '[{\"url\":\"http://...\", \"cloudinaryId\":\"...\"}]'"
                incident:
                  type: string
                  format: objectId
              required: # Added based on controller logic
                - title
                - description
                - incident
                - images
      responses:
        "200":
          description: News item updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/News"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: News item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires government role.
    patch:
      summary: Partially update a news item
      tags:
        - News
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      requestBody:
        required: true
        content:
          multipart/form-data: # Controller uses upload.none() but parses 'images' as stringified JSON
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 4
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                description:
                  type: string
                  minLength: 4
                  maxLength: 1000
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                images: # Sent as a stringified JSON array of objects
                  type: string
                  description: "A JSON string representing an array of image objects, e.g., '[{\"url\":\"http://...\", \"cloudinaryId\":\"...\"}]'"
                incident:
                  type: string
                  format: objectId
              required: # Added based on controller logic (same as PUT for this controller)
                - title
                - description
                - incident
                - images
      responses:
        "200":
          description: News item updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/News"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: News item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires government role.
    delete:
      summary: Delete a news item
      tags:
        - News
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      responses:
        "200":
          description: News item deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "400":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: News item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires government or admin role.
  /volunteer:
    get:
      summary: Get all volunteers
      tags:
        - Volunteers
      security:
        - bearerAuth: []
      parameters:
        - name: search
          in: query
          description: Search term (matches fullName, sex, expertise, or contribution)
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 5
            minimum: 1
      responses:
        "200":
          description: List of volunteers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedVolunteerResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires admin or charity role.
    post:
      summary: Register a new volunteer for a charity ad
      tags:
        - Volunteers
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                charityAdId: # Added
                  type: string
                  format: objectId
                user:
                  type: string
                  format: objectId
                fullName:
                  type: string
                  minLength: 5
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                sex:
                  type: string
                  enum: [male, female]
                age:
                  type: integer
                  minimum: 1
                  maximum: 120
                email:
                  type: string
                  format: email
                phone:
                  type: string
                  pattern: ^\+?[1-9]\d{1,14}$
                expertise:
                  type: string
                contribution:
                  type: string
              required:
                - charityAdId # Added
                - user
                - fullName
                - age
                - email
                - phone
                - expertise
                - contribution
      responses:
        "201":
          description: Volunteer registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/Volunteer"
        "400":
          description: Bad request (e.g., already registered, ad closed)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: CharityAd not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires user role.
    delete:
      summary: Delete all volunteers
      tags:
        - Volunteers
      security:
        - bearerAuth: []
      responses:
        "200":
          description: All volunteers deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  count:
                    type: integer
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404": # Controller can return 404 if no volunteers found
          description: No volunteers found to delete
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires admin role.
  /volunteer/{id}:
    get:
      summary: Get a volunteer by ID
      tags:
        - Volunteers
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      responses:
        "200":
          description: Volunteer details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/Volunteer"
        "400":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Volunteer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires user or charity role.
    put:
      summary: Update a volunteer
      tags:
        - Volunteers
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: # Note: user and charityAdId are not updatable via this endpoint by design in controller
                fullName:
                  type: string
                  minLength: 5
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                sex:
                  type: string
                  enum: [male, female]
                age:
                  type: integer
                  minimum: 1
                  maximum: 120
                email:
                  type: string
                  format: email
                phone:
                  type: string
                  pattern: ^\+?[1-9]\d{1,14}$
                expertise:
                  type: string
                contribution:
                  type: string
      responses:
        "200":
          description: Volunteer updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/Volunteer"
        "400":
          description: Bad request (e.g., duplicate email/phone on different volunteer)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Volunteer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires user role (to update their own volunteer registration).
    delete:
      summary: Delete a volunteer registration
      tags:
        - Volunteers
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      responses:
        "200":
          description: Volunteer deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "400":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Volunteer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires user role (to delete their own volunteer registration).
  /org:
    get:
      summary: Get all organizations
      tags:
        - Organizations
      security:
        - bearerAuth: []
      parameters:
        - name: search
          in: query
          description: Search term (matches name or role)
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
      responses:
        "200":
          description: List of organizations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedOrganizationResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires admin or government role.
    post:
      summary: Create a new organization
      tags:
        - Organizations
      # No bearerAuth for public registration
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                organizationName: # Changed from name
                  type: string
                  minLength: 5
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                email:
                  type: string
                  format: email
                phone:
                  type: string
                password:
                  type: string
                taxId:
                  type: string
                image:
                  type: string
                  format: binary
                mission:
                  type: string
                  minLength: 5
                  maxLength: 100
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                role:
                  type: string
                  enum: [charity, government]
                  default: charity
              required:
                - organizationName # Changed from name
                - email
                - phone
                - password
                - role
                - taxId # Model taxId is required
      responses:
        "201":
          description: Organization created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/Organization"
                  token: # Controller returns token
                    type: string
        "400":
          description: Bad request (e.g., name/email/phone taken, image upload failed)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Public endpoint for charity registration. Government organizations can only be created by an admin (controller logic handles this).
    delete:
      summary: Delete all organizations
      tags:
        - Organizations
      security:
        - bearerAuth: []
      responses:
        "200":
          description: All organizations deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  count:
                    type: integer
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires admin role.
  /org/login:
    post:
      summary: Organization login
      tags:
        - Organizations
      requestBody:
        required: true
        content:
          application/json: # Controller uses req.body directly
            schema:
              type: object
              properties:
                identifier:
                  type: string
                  description: Email or phone number
                password:
                  type: string
              required:
                - identifier
                - password
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  data:
                    type: object
                    properties:
                      email:
                        type: string
                      role:
                        type: string
                      phone:
                        type: string
        "400":
          description: Bad request (e.g., missing fields, incorrect password)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized (user not found)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /org/{id}:
    get:
      summary: Get an organization by ID
      tags:
        - Organizations
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      responses:
        "200":
          description: Organization details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: "#/components/schemas/Organization"
        "400":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires authentication.
    patch:
      summary: Update an organization
      tags:
        - Organizations
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                organizationName: # Changed from name
                  type: string
                  minLength: 5
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                email:
                  type: string
                  format: email
                phone:
                  type: string
                # password: # Password update should be a separate endpoint for security
                #   type: string
                taxId:
                  type: string
                image:
                  type: string
                  format: binary
                mission:
                  type: string
                  minLength: 5
                  maxLength: 100
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                role: # Role change might have implications, controller prevents changing to 'government' here
                  type: string
                  enum: [charity, government]
      responses:
        "200":
          description: Organization updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/Organization"
        "400":
          description: Bad request (e.g., name/email/phone taken)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires charity or government role (for self-update).
    delete:
      summary: Delete an organization
      tags:
        - Organizations
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      responses:
        "200":
          description: Organization deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "400":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires charity, government (for self-delete), or admin role.
  /org/verify/{id}:
    patch:
      summary: Verify an organization
      tags:
        - Organizations
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      responses:
        "200":
          description: Organization verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "400":
          description: Bad request (e.g., already verified, invalid ID)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires admin role.
  /report:
    get:
      summary: Get all reports
      tags:
        - Reports
      security:
        - bearerAuth: []
      parameters:
        - name: search
          in: query
          description: Search term (matches title, status, type, or date) # Status/date not in model for search
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 5
            minimum: 1
      responses:
        "200":
          description: List of reports
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedReportResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires admin or government role.
    post:
      summary: Create a new report
      tags:
        - Reports
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                type:
                  type: string
                  minLength: 4
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                  description: Type of disaster (e.g., wild fire, earth quake)
                title:
                  type: string
                  minLength: 10
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                  description: Title of the report (optional)
                description:
                  type: string
                  minLength: 4
                  maxLength: 300
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                  description: Description of the report
                image: # Matches upload.array("image", 10)
                  type: array
                  items:
                    type: string
                    format: binary
                  maxItems: 10
                  description: Up to 10 image files for the report
                longitude:
                  type: number
                  format: double
                  description: Longitude of the report location
                latitude:
                  type: number
                  format: double
                  description: Latitude of the report location
                reportedBy:
                  type: string
                  format: objectId
                  description: ID of the user reporting the incident
                incident: # This is for associating with an existing incident, but controller logic mainly auto-associates or creates new.
                  type: string
                  format: objectId
                  nullable: true
                  description: Associated incident ID (optional, controller logic may override)
              required:
                - type
                - description
                - longitude
                - latitude
                - reportedBy
      responses:
        "201":
          description: Report created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/Report"
                  incident:
                    oneOf:
                      - type: object
                        properties:
                          id:
                            type: string
                            format: objectId
                          status:
                            type: string
                          reportCount:
                            type: integer
                        description: Existing incident details if matched
                      - type: object
                        properties:
                          type:
                            type: string
                          status:
                            type: string
                        description: New incident details if created
        "400":
          description: Bad request (e.g., missing fields, invalid location, already reported)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404": # If reportedBy user not found
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires user role.
    delete:
      summary: Delete all reports
      tags:
        - Reports
      security:
        - bearerAuth: []
      responses:
        "200":
          description: All reports deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  deletedCount:
                    type: integer
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires admin role.
  /report/{id}:
    get:
      summary: Get a report by ID
      tags:
        - Reports
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      responses:
        "200":
          description: Report details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/Report"
        "400":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Report not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires authentication.
    put:
      summary: Update a report
      tags:
        - Reports
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                type:
                  type: string
                  minLength: 4
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                  description: Type of disaster (e.g., wild fire, earth quake)
                title:
                  type: string
                  minLength: 10
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                  description: Title of the report (optional)
                description:
                  type: string
                  minLength: 4
                  maxLength: 300
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                  description: Description of the report
                image:
                  type: array
                  items:
                    type: string
                    format: binary
                  maxItems: 10
                  description: Up to 10 image files to replace or add to the report
                # reportedBy: # Cannot change reportedBy
                #   type: string
                #   format: objectId
                # incident: # Incident association is handled by controller logic
                #   type: string
                #   format: objectId
                #   nullable: true
      responses:
        "200":
          description: Report updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/Report"
        "400":
          description: Bad request or invalid ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden (e.g., not owner of report)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Report not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires user role (owner of the report).
    delete:
      summary: Delete a report
      tags:
        - Reports
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      responses:
        "200":
          description: Report deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "400":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Report not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires user (owner) or admin role.
  /user:
    get:
      summary: Get all users
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: search
          in: query
          description: Search term (matches firstName, lastName, or role)
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 5
            minimum: 1
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedUserResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires admin role.
    post:
      summary: Create a new user (Register)
      tags:
        - Users
      # No bearerAuth for public registration
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  minLength: 4
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                lastName:
                  type: string
                  minLength: 4
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                email:
                  type: string
                  format: email
                phone:
                  type: string
                password:
                  type: string
                role:
                  type: string
                  enum: [user, admin]
                  default: user
                image:
                  type: string
                  format: binary
              required:
                - firstName
                - lastName
                - email
                - phone
                - password
                # role is not required in request as it defaults, or can be set by admin (handled by Mongoose)
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/User"
                  token: # Controller returns token
                    type: string
        "400":
          description: Bad request (e.g., email/phone taken, image upload failed)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete all users
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: All users deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  count:
                    type: integer
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires admin role.
  /user/login:
    post:
      summary: User login
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json: # Controller expects JSON
            schema:
              type: object
              properties:
                identifier:
                  type: string
                  description: Email or phone number
                password:
                  type: string
              required:
                - identifier
                - password
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  # success: # Controller does not return success field
                  #   type: boolean
                  message:
                    type: string
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        format: objectId
                      full_name:
                        type: string
                      email:
                        type: string
                      phone:
                        type: string
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized (user not found or incorrect password)
          content:
            application/json:
              schema: # Controller returns simple { error: "message" }
                type: object
                properties:
                  error:
                    type: string
  /user/{id}:
    get:
      summary: Get a user by ID
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/User"
        "400":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires authentication.
    patch:
      summary: Update a user
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  minLength: 4
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                lastName:
                  type: string
                  minLength: 4
                  pattern: ^[A-Za-z0-9\s.,!?'"&()-]+$
                email:
                  type: string
                  format: email
                phone:
                  type: string
                # password: # Password update should be via /changePassword
                #   type: string
                image:
                  type: string
                  format: binary
                role: # Added from controller logic, only admin can change
                  type: string
                  enum: [user, admin]
                  description: "User role, can only be changed by an admin."
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/User"
        "400":
          description: Bad request (e.g., email/phone taken, role update by non-admin)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden (e.g., trying to update another user without admin rights)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires user role (for self-update) or admin role (for any user update, including role).
    delete:
      summary: Delete a user
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: objectId
      responses:
        "200":
          description: User deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data: # Controller returns deleted user
                    $ref: "#/components/schemas/User"
        "400":
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      description: Requires user (for self-delete) or admin role.
  /user/changePassword/{id}:
    patch:
      summary: Change user password
      description: Allows an authenticated user to change their password. Requires user or admin role.
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - oldPassword
                - newPassword
              properties:
                oldPassword:
                  type: string
                  example: oldpass123
                newPassword:
                  type: string
                  example: newpass456
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Password changed successfully
        "400":
          description: Missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Old password and new password required
                  error:
                    type: string
                    example: missing fields
        "401":
          description: Incorrect password or Unauthorized
          content:
            application/json:
              schema: # Controller returns simple { error: "message" } or auth middleware error
                type: object
                properties:
                  error:
                    type: string
                    example: incorrect password
                  message: # From auth middleware
                    type: string
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: User not found
                  error:
                    type: string
                    example: document not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Internal Server error
                  error:
                    type: string
                    example: Detailed error message
security:
  - bearerAuth: []