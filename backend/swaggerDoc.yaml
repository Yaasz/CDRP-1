openapi: 3.0.3
info:
  title: Disaster Management API
  version: 1.0.0
servers:
  - url: http://localhost:5555/api
    description: development server
  - url: https://cdrp-1.onrender.com/api
    description: production server
tags:
  - name: Users
  - name: Organizations
  - name: Reports
  - name: Volunteers
  - name: News
  - name: Incidents
  - name: Assignments
  - name: CharityAds
  - name: Announcements
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      required: [firstName, lastName, email, phone, password]
      properties:
        _id: { type: string }
        firstName: { type: string, minLength: 4 }
        lastName: { type: string, minLength: 3 }
        email: { type: string, format: email }
        phone: { type: string }
        password: { type: string }
        role: { type: string, enum: [user, admin], default: user }
        image: { type: string, format: uri }
        cloudinaryId: { type: string }
        isVerified: { type: boolean, default: false }
        verificationToken: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Organization:
      type: object
      required: [organizationName, email, phone, password, taxId, role]
      properties:
        _id: { type: string }
        organizationName: { type: string, minLength: 5 }
        email: { type: string, format: email }
        phone: { type: string }
        password: { type: string }
        taxId: { type: string }
        image: { type: string, format: uri }
        cloudinaryId: { type: string }
        mission: { type: string, minLength: 5, maxLength: 100 }
        role: { type: string, enum: [charity, government], default: charity }
        isVerified: { type: boolean, default: false }
        status: { type: string, enum: [active, inactive], default: active }
        verificationToken: { type: string }
        emailVerified: { type: boolean, default: false }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Report:
      type: object
      required: [type, description, location]
      properties:
        _id: { type: string }
        type: { type: string, minLength: 4 }
        title: { type: string, minLength: 4 }
        description: { type: string, minLength: 4, maxLength: 300 }
        image:
          {
            type: array,
            items:
              {
                type: object,
                properties:
                  {
                    url: { type: string, format: uri },
                    cloudinaryId: { type: string },
                  },
              },
          }
        location:
          {
            type: object,
            properties:
              {
                type: { type: string, enum: [Point] },
                coordinates: { type: array, items: { type: number } },
                name: { type: string },
              },
          }
        reportedBy: { type: string }
        incident: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Incident:
      type: object
      required: [type, title, description, dateOccurred, location, status]
      properties:
        _id: { type: string }
        type: { type: string, minLength: 4 }
        title: { type: string, minLength: 4 }
        description: { type: string, minLength: 4, maxLength: 300 }
        dateOccurred: { type: string, format: date-time }
        location:
          type: object
          properties:
            type: { type: string, enum: [Point] }
            coordinates: { type: array, items: { type: number } }
        status:
          {
            type: string,
            enum:
              [pending, validated, assigned, in progress, critical, resolved],
            default: pending,
          }
        reports: { type: array, items: { type: string } }
        priority: { type: string, enum: [high, medium, low], default: medium }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    News:
      type: object
      required: [title, description, incident]
      properties:
        _id: { type: string }
        title: { type: string, minLength: 4 }
        description: { type: string, minLength: 4, maxLength: 1000 }
        images:
          {
            type: array,
            items:
              {
                type: object,
                properties:
                  {
                    url: { type: string, format: uri },
                    cloudinaryId: { type: string },
                  },
              },
          }
        incident: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    CharityAd:
      type: object
      required: [charity, title, description, duration, expiresAt]
      properties:
        _id: { type: string }
        charity: { type: string }
        title: { type: string, minLength: 4, maxLength: 50 }
        image: { type: string, format: uri }
        cloudinaryId: { type: string }
        description: { type: string, minLength: 4, maxLength: 1000 }
        status: { type: string, enum: [open, closed], default: open }
        volunteers: { type: array, items: { type: string } }
        duration: { type: number }
        expiresAt: { type: string, format: date-time }
        categories: { type: array, items: { type: string } }
        requirements:
          {
            type: object,
            properties:
              {
                location: { type: string },
                skills: { type: array, items: { type: string } },
              },
          }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Announcement:
      type: object
      required: [incident, title, description]
      properties:
        _id: { type: string }
        incident: { type: string }
        title: { type: string, minLength: 4 }
        description: { type: string, minLength: 4, maxLength: 300 }
        charities:
          {
            type: array,
            items:
              {
                type: object,
                properties:
                  {
                    charity: { type: string },
                    response:
                      {
                        type: string,
                        enum: [Pending, Accepted, Rejected],
                        default: Pending,
                      },
                  },
              },
          }
        duration: { type: number }
        expiresAt: { type: string, format: date-time }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Assignment:
      type: object
      required: [incident, organization, assignedBy]
      properties:
        _id: { type: string }
        incident: { type: string }
        organization: { type: string }
        assignedBy: { type: string }
        notes: { type: string, maxLength: 500 }
        priorityLevel:
          { type: string, enum: [high, medium, low], default: medium }
        status:
          {
            type: string,
            enum: [active, completed, cancelled],
            default: active,
          }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Volunteer:
      type: object
      required:
        [
          charityAdId,
          user,
          fullName,
          age,
          email,
          phone,
          expertise,
          contribution,
        ]
      properties:
        _id: { type: string }
        charityAdId: { type: string }
        user: { type: string }
        fullName: { type: string, minLength: 5 }
        sex: { type: string, enum: [male, female] }
        age: { type: number, minimum: 1, maximum: 120 }
        email: { type: string, format: email }
        phone: { type: string }
        expertise: { type: string }
        contribution: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
paths:
  /user:
    get:
      tags: [Users]
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          {
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        type: array,
                        items: { $ref: "#/components/schemas/User" },
                      },
                  },
              },
          }
    post:
      tags: [Users]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                firstName: { type: string }
                lastName: { type: string }
                email: { type: string }
                phone: { type: string }
                password: { type: string }
                role: { type: string }
                image: { type: string, format: binary }
      responses:
        "201":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/User" } },
              },
          }
    delete:
      tags: [Users]
      security: [{ bearerAuth: [] }]
      responses:
        "200": { content: { application/json: {} } }
  /user/login:
    post:
      tags: [Users]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [identifier, password]
              properties:
                identifier: { type: string }
                password: { type: string }
      responses:
        "200": { content: { application/json: {} } }
  /user/verify:
    get:
      tags: [Users]
      parameters:
        - in: query
          name: token
          schema: { type: string }
      responses:
        "200": { content: { application/json: {} } }
  /user/{id}:
    get:
      tags: [Users]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/User" } },
              },
          }
    patch:
      tags: [Users]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                firstName: { type: string }
                lastName: { type: string }
                email: { type: string }
                phone: { type: string }
                role: { type: string }
                image: { type: string, format: binary }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/User" } },
              },
          }
    delete:
      tags: [Users]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200": { content: { application/json: {} } }
  /user/changePassword/{id}:
    patch:
      tags: [Users]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword: { type: string }
                newPassword: { type: string }
      responses:
        "200": { content: { application/json: {} } }
  /user/forceResetPassword/{id}:
    patch:
      tags: [Users]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword: { type: string }
      responses:
        "200": { content: { application/json: {} } }
  /org:
    get:
      tags: [Organizations]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 5 }
        - in: query
          name: search
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        type: array,
                        items: { $ref: "#/components/schemas/Organization" },
                      },
                  },
              },
          }
    post:
      tags: [Organizations]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                organizationName: { type: string }
                email: { type: string }
                phone: { type: string }
                password: { type: string }
                taxId: { type: string }
                mission: { type: string }
                role: { type: string }
                image: { type: string, format: binary }
      responses:
        "201":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Organization" } },
              },
          }
    delete:
      tags: [Organizations]
      security: [{ bearerAuth: [] }]
      responses:
        "200": { content: { application/json: {} } }
  /org/login:
    post:
      tags: [Organizations]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [identifier, password]
              properties:
                identifier: { type: string }
                password: { type: string }
      responses:
        "200": { content: { application/json: {} } }
  /org/verifyEmail:
    get:
      tags: [Organizations]
      parameters:
        - in: query
          name: token
          schema: { type: string }
      responses:
        "200": { content: { application/json: {} } }
  /org/{id}:
    get:
      tags: [Organizations]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Organization" } },
              },
          }
    patch:
      tags: [Organizations]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                organizationName: { type: string }
                email: { type: string }
                phone: { type: string }
                mission: { type: string }
                role: { type: string }
                image: { type: string, format: binary }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Organization" } },
              },
          }
    delete:
      tags: [Organizations]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200": { content: { application/json: {} } }
  /org/verify/{id}:
    patch:
      tags: [Organizations]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200": { content: { application/json: {} } }
  /report:
    get:
      tags: [Reports]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 5 }
        - in: query
          name: search
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        type: array,
                        items: { $ref: "#/components/schemas/Report" },
                      },
                  },
              },
          }
    post:
      tags: [Reports]
      security: [{ bearerAuth: [] }]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                type: { type: string }
                title: { type: string }
                description: { type: string }
                location:
                  {
                    type: object,
                    properties:
                      {
                        type: { type: string },
                        coordinates: { type: array, items: { type: number } },
                      },
                  }
                image:
                  {
                    type: array,
                    items: { type: string, format: binary },
                    maxItems: 10,
                  }
      responses:
        "201":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Report" } },
              },
          }
    delete:
      tags: [Reports]
      security: [{ bearerAuth: [] }]
      responses:
        "200": { content: { application/json: {} } }
  /report/{id}:
    get:
      tags: [Reports]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Report" } },
              },
          }
    put:
      tags: [Reports]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                type: { type: string }
                title: { type: string }
                description: { type: string }
                location:
                  {
                    type: object,
                    properties:
                      {
                        type: { type: string },
                        coordinates: { type: array, items: { type: number } },
                      },
                  }
                image:
                  {
                    type: array,
                    items: { type: string, format: binary },
                    maxItems: 10,
                  }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Report" } },
              },
          }
    delete:
      tags: [Reports]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200": { content: { application/json: {} } }
  /report/user/{id}:
    get:
      tags: [Reports]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        type: array,
                        items: { $ref: "#/components/schemas/Report" },
                      },
                  },
              },
          }
  /volunteer:
    get:
      tags: [Volunteers]
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          {
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        type: array,
                        items: { $ref: "#/components/schemas/Volunteer" },
                      },
                  },
              },
          }
    post:
      tags: [Volunteers]
      security: [{ bearerAuth: [] }]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                charityAdId: { type: string }
                user: { type: string }
                fullName: { type: string }
                sex: { type: string }
                age: { type: number }
                email: { type: string }
                phone: { type: string }
                expertise: { type: string }
                contribution: { type: string }
      responses:
        "201":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Volunteer" } },
              },
          }
    delete:
      tags: [Volunteers]
      security: [{ bearerAuth: [] }]
      responses:
        "200": { content: { application/json: {} } }
  /volunteer/{id}:
    get:
      tags: [Volunteers]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Volunteer" } },
              },
          }
    put:
      tags: [Volunteers]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName: { type: string }
                sex: { type: string }
                age: { type: number }
                email: { type: string }
                phone: { type: string }
                expertise: { type: string }
                contribution: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Volunteer" } },
              },
          }
    delete:
      tags: [Volunteers]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200": { content: { application/json: {} } }
  /news:
    get:
      tags: [News]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
        - in: query
          name: search
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        type: array,
                        items: { $ref: "#/components/schemas/News" },
                      },
                  },
              },
          }
    post:
      tags: [News]
      security: [{ bearerAuth: [] }]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                description: { type: string }
                incident: { type: string }
                images:
                  {
                    type: array,
                    items:
                      {
                        type: object,
                        properties:
                          {
                            url: { type: string, format: uri },
                            cloudinaryId: { type: string },
                          },
                      },
                  }
      responses:
        "201":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/News" } },
              },
          }
    delete:
      tags: [News]
      security: [{ bearerAuth: [] }]
      responses:
        "200": { content: { application/json: {} } }
  /news/{id}:
    get:
      tags: [News]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/News" } },
              },
          }
    put:
      tags: [News]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                description: { type: string }
                incident: { type: string }
                images:
                  {
                    type: array,
                    items:
                      {
                        type: object,
                        properties:
                          {
                            url: { type: string, format: uri },
                            cloudinaryId: { type: string },
                          },
                      },
                  }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/News" } },
              },
          }
    patch:
      tags: [News]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                description: { type: string }
                incident: { type: string }
                images:
                  {
                    type: array,
                    items:
                      {
                        type: object,
                        properties:
                          {
                            url: { type: string, format: uri },
                            cloudinaryId: { type: string },
                          },
                      },
                  }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/News" } },
              },
          }
    delete:
      tags: [News]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200": { content: { application/json: {} } }
  /incidents:
    get:
      tags: [Incidents]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 5 }
        - in: query
          name: search
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        type: array,
                        items: { $ref: "#/components/schemas/Incident" },
                      },
                  },
              },
          }
    delete:
      tags: [Incidents]
      security: [{ bearerAuth: [] }]
      responses:
        "200": { content: { application/json: {} } }
  /incidents/{id}:
    get:
      tags: [Incidents]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Incident" } },
              },
          }
    patch:
      tags: [Incidents]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type: { type: string }
                title: { type: string }
                description: { type: string }
                status: { type: string }
                location:
                  {
                    type: object,
                    properties:
                      {
                        type: { type: string },
                        coordinates: { type: array, items: { type: number } },
                      },
                  }
                dateOccurred: { type: string, format: date-time }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Incident" } },
              },
          }
    delete:
      tags: [Incidents]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200": { content: { application/json: {} } }
  /incidents/images/{id}:
    get:
      tags: [Incidents]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        type: array,
                        items:
                          {
                            type: object,
                            properties:
                              {
                                url: { type: string, format: uri },
                                cloudinaryId: { type: string },
                              },
                          },
                      },
                  },
              },
          }
  /incidents/{id}/assign:
    post:
      tags: [Incidents]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                incidentId: { type: string }
                organizationId: { type: string }
                notes: { type: string }
                priorityLevel: { type: string }
      responses:
        "201":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Assignment" } },
              },
          }
  /incidents/{id}/assignments:
    get:
      tags: [Incidents]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        type: array,
                        items: { $ref: "#/components/schemas/Assignment" },
                      },
                  },
              },
          }
  /assignments:
    get:
      tags: [Assignments]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
        - in: query
          name: organization
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        type: array,
                        items: { $ref: "#/components/schemas/Assignment" },
                      },
                  },
              },
          }
    post:
      tags: [Assignments]
      security: [{ bearerAuth: [] }]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                incidentId: { type: string }
                organizationId: { type: string }
                notes: { type: string }
                priorityLevel: { type: string }
      responses:
        "201":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Assignment" } },
              },
          }
  /assignments/{id}:
    get:
      tags: [Assignments]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Assignment" } },
              },
          }
    patch:
      tags: [Assignments]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Assignment" } },
              },
          }
  /assignments/incident/{incidentId}:
    get:
      tags: [Assignments]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: incidentId
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        type: array,
                        items: { $ref: "#/components/schemas/Assignment" },
                      },
                  },
              },
          }
  /charityad:
    get:
      tags: [CharityAds]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 5 }
        - in: query
          name: search
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        type: array,
                        items: { $ref: "#/components/schemas/CharityAd" },
                      },
                  },
              },
          }
    post:
      tags: [CharityAds]
      security: [{ bearerAuth: [] }]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                charity: { type: string }
                title: { type: string }
                description: { type: string }
                duration: { type: number }
                categories: { type: array, items: { type: string } }
                requirements:
                  {
                    type: object,
                    properties:
                      {
                        location: { type: string },
                        skills: { type: array, items: { type: string } },
                      },
                  }
                image: { type: string, format: binary }
      responses:
        "201":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/CharityAd" } },
              },
          }
    delete:
      tags: [CharityAds]
      security: [{ bearerAuth: [] }]
      responses:
        "200": { content: { application/json: {} } }
  /charityad/{id}:
    get:
      tags: [CharityAds]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/CharityAd" } },
              },
          }
    put:
      tags: [CharityAds]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                charity: { type: string }
                title: { type: string }
                description: { type: string }
                duration: { type: number }
                categories: { type: array, items: { type: string } }
                requirements:
                  {
                    type: object,
                    properties:
                      {
                        location: { type: string },
                        skills: { type: array, items: { type: string } },
                      },
                  }
                image: { type: string, format: binary }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/CharityAd" } },
              },
          }
    delete:
      tags: [CharityAds]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200": { content: { application/json: {} } }
  /announcement:
    get:
      tags: [Announcements]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
        - in: query
          name: search
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  {
                    schema:
                      {
                        type: array,
                        items: { $ref: "#/components/schemas/Announcement" },
                      },
                  },
              },
          }
    post:
      tags: [Announcements]
      security: [{ bearerAuth: [] }]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                incident: { type: string }
                title: { type: string }
                description: { type: string }
                charities: { type: array, items: { type: string } }
      responses:
        "201":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Announcement" } },
              },
          }
  /announcement/{id}:
    get:
      tags: [Announcements]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Announcement" } },
              },
          }
    put:
      tags: [Announcements]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                description: { type: string }
                charities: { type: array, items: { type: string } }
      responses:
        "200":
          {
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/Announcement" } },
              },
          }
    delete:
      tags: [Announcements]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200": { content: { application/json: {} } }
